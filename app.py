from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit, join_room, leave_room
import json
from datetime import datetime

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
rooms = {}
users = {}

@app.route('/')
def index():
    return render_template('main.html')

@app.route('/room/<room_id>')
def room(room_id):
    return render_template('index.html', room_id=room_id)

@socketio.on('join')
def on_join(data):
    room = data['room']
    user_profile = data.get('profile', {'name': '–ì–æ—Å—Ç—å', 'avatar': 'üòä'})
    
    join_room(room)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    users[request.sid] = {
        'room': room,
        'profile': user_profile,
        'connected_at': datetime.now(),
        'speaking': False,
        'mic_enabled': True,
        'camera_enabled': False,
        'screen_sharing': False
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    if room not in rooms:
        rooms[room] = {'users': [], 'created_at': datetime.now()}
    
    rooms[room]['users'].append({
        'sid': request.sid,
        'profile': user_profile
    })
    
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    emit('user_joined', {
        'user_id': request.sid,
        'profile': user_profile,
        'participants_count': len(rooms[room]['users'])
    }, to=room)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    emit('participants_update', {
        'participants': [u['profile'] for u in rooms[room]['users']],
        'count': len(rooms[room]['users'])
    })
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_profile['name']} {user_profile['avatar']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room}")

@socketio.on('speaking_status')
def handle_speaking_status(data):
    room = data['room']
    speaking = data['speaking']
    user_profile = data['profile']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request.sid in users:
        users[request.sid]['speaking'] = speaking
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
    emit('speaking_status', {
        'profile': user_profile,
        'speaking': speaking,
        'user_id': request.sid
    }, to=room, include_self=False)
    
    status_text = "–≥–æ–≤–æ—Ä–∏—Ç" if speaking else "–º–æ–ª—á–∏—Ç"
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_profile['name']} {user_profile['avatar']} {status_text}")

@socketio.on('camera_status')
def handle_camera_status(data):
    room = data['room']
    enabled = data['enabled']
    user_profile = data['profile']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request.sid in users:
        users[request.sid]['camera_enabled'] = enabled
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
    emit('camera_status', {
        'profile': user_profile,
        'enabled': enabled,
        'user_id': request.sid
    }, to=room)
    
    status_text = "–≤–∫–ª—é—á–∏–ª" if enabled else "–≤—ã–∫–ª—é—á–∏–ª"
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_profile['name']} {user_profile['avatar']} {status_text} –∫–∞–º–µ—Ä—É")

@socketio.on('screen_status')
def handle_screen_status(data):
    room = data['room']
    enabled = data['enabled']
    user_profile = data['profile']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request.sid in users:
        users[request.sid]['screen_sharing'] = enabled
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
    emit('screen_status', {
        'profile': user_profile,
        'enabled': enabled,
        'user_id': request.sid
    }, to=room)
    
    status_text = "–Ω–∞—á–∞–ª" if enabled else "–∑–∞–≤–µ—Ä—à–∏–ª"
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_profile['name']} {user_profile['avatar']} {status_text} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞")

@socketio.on('mic_status')
def handle_mic_status(data):
    room = data['room']
    enabled = data['enabled']
    user_profile = data['profile']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request.sid in users:
        users[request.sid]['mic_enabled'] = enabled
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
    emit('mic_status', {
        'profile': user_profile,
        'enabled': enabled,
        'user_id': request.sid
    }, to=room)
    
    status_text = "–≤–∫–ª—é—á–∏–ª" if enabled else "–≤—ã–∫–ª—é—á–∏–ª"
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_profile['name']} {user_profile['avatar']} {status_text} –º–∏–∫—Ä–æ—Ñ–æ–Ω")

@socketio.on('offer')
def handle_offer(data):
    emit('offer', data, to=data['to'])

@socketio.on('answer')
def handle_answer(data):
    emit('answer', data, to=data['to'])

@socketio.on('ice-candidate')
def handle_ice_candidate(data):
    emit('ice-candidate', data, to=data['to'])

@socketio.on('toggle_video')
def toggle_video(data):
    emit('video_status', data, to=data['room'])

@socketio.on('toggle_screen')
def toggle_screen(data):
    emit('screen_status', data, to=data['room'])

@socketio.on('toggle_audio')
def toggle_audio(data):
    emit('audio_status', data, to=data['room'])

@socketio.on('message')
def handle_message(data):
    room = data['room']
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_profile = users.get(request.sid, {}).get('profile', {'name': '–ì–æ—Å—Ç—å', 'avatar': 'üòä'})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_data = {
        'msg': data['msg'],
        'author': data.get('author', sender_profile['name']),
        'avatar': data.get('avatar', sender_profile['avatar']),
        'timestamp': data.get('timestamp', datetime.now().strftime('%H:%M')),
        'sender_id': request.sid
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    emit('message', message_data, to=room)
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message_data['author']} {message_data['avatar']}: {message_data['msg']}")

@socketio.on('reaction')
def handle_reaction(data):
    room = data['room']
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_profile = users.get(request.sid, {}).get('profile', {'name': '–ì–æ—Å—Ç—å', 'avatar': 'üòä'})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
    reaction_data = {
        'emoji': data['emoji'],
        'author': data.get('author', sender_profile['name']),
        'avatar': data.get('avatar', sender_profile['avatar']),
        'timestamp': data.get('timestamp', datetime.now().strftime('%H:%M')),
        'sender_id': request.sid
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    emit('reaction', reaction_data, to=room)
    print(f"–†–µ–∞–∫—Ü–∏—è –æ—Ç {reaction_data['author']} {reaction_data['avatar']}: {reaction_data['emoji']}")

@socketio.on('disconnect')
def handle_disconnect():
    if request.sid in users:
        user_info = users[request.sid]
        room = user_info['room']
        user_profile = user_info['profile']
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        if room in rooms:
            rooms[room]['users'] = [u for u in rooms[room]['users'] if u['sid'] != request.sid]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            emit('user_left', {
                'user_id': request.sid,
                'profile': user_profile,
                'participants_count': len(rooms[room]['users'])
            }, to=room)
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
            if len(rooms[room]['users']) == 0:
                del rooms[room]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del users[request.sid]
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_profile['name']} {user_profile['avatar']} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É {room}")

if __name__ == '__main__':
    socketio.run(app, debug=True)